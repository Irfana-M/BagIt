<%-include("../../views/partials/user/header")%>
    <style>
      /* General Reset */
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Arial", sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #f8f9fa;
      }

      /* Checkout Area */
      .checkout_area {
        padding: 50px 0;
      }

      .select_address {
        background: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }

      .select_address h3 {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 20px;
        color: #333;
      }

      .select_address .form-group {
        margin-bottom: 15px;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        transition: all 0.3s ease;
      }

      .select_address .form-group:hover {
        border-color: #00bcd4;
        box-shadow: 0 2px 10px rgba(0, 188, 212, 0.1);
      }

      .select_address input[type="radio"] {
        margin-right: 10px;
      }

      .select_address label {
        font-size: 16px;
        color: #333;
        cursor: pointer;
      }

      .select_address a {
        color: #00bcd4;
        text-decoration: none;
        font-weight: bold;
      }

      .select_address a:hover {
        text-decoration: underline;
      }

      /* Order Summary */
      .order_box {
        background: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }

      .order_box h2 {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 20px;
        color: #333;
      }

      .order_box .list {
        list-style: none;
        padding: 0;
        margin-bottom: 20px;
      }

      .order_box .list li {
        font-size: 16px;
        margin-bottom: 10px;
        color: #333;
      }

      .order_box .list .last {
        font-weight: bold;
        color: #00bcd4;
      }

      .order_box .payment_item {
        margin-bottom: 15px;
      }

      .order_box .payment_item label {
        font-size: 16px;
        color: #333;
      }

      .order_box .payment_item label i {
        margin-right: 10px;
      }

      .order_box .primary-btn {
        background: #00bcd4;
        color: #fff;
        border: none;
        padding: 12px 25px;
        border-radius: 5px;
        font-size: 18px;
        cursor: pointer;
        transition: all 0.3s;
        width: 100%;
      }

      .order_box .primary-btn:hover {
        background: #0097a7;
      }

      /* Footer Styling */
      .footer-area {
        background: #222;
        color: #fff;
        padding: 30px 0;
      }

      .footer-area h6 {
        font-size: 20px;
        font-weight: bold;
        color: #00bcd4;
        margin-bottom: 20px;
      }

      .footer-area p {
        font-size: 16px;
        color: #bbb;
      }

      .footer-area a {
        color: #fff;
        text-decoration: none;
      }

      .footer-area a:hover {
        text-decoration: underline;
      }
      .product-info {
          display: flex;
          align-items: center;  /* Aligns all items vertically centered */
          justify-content: flex-start; /* Aligns items to the left */
          gap: 20px; /* Adds space between product name, quantity, and price */
      }

      .product-name {
          font-weight: bold;
      }

      .quantity {
          font-weight: normal;
      }

      .price {
          font-weight: bold;
          margin-left: auto; /* Pushes the price to the far right */
      }
      #couponMessage {
          margin-top: 10px;
          font-size: 18px;
          color: red; /* Default color for error messages */
}


      
    </style>


    <!-- Start Banner Area -->
    <section class="banner-area organic-breadcrumb">
      <div class="container">
        <div
          class="breadcrumb-banner d-flex flex-wrap align-items-center justify-content-end"
        >
          <div class="col-first">
            <h1>Checkout</h1>
            <nav class="d-flex align-items-center">
              <a href="/">Home<span class="lnr lnr-arrow-right"></span></a>
              <a href="/checkout">Checkout</a>
            </nav>
          </div>
        </div>
      </div>
    </section>
    <!-- End Banner Area -->

    <!--================Checkout Area =================-->
    <section class="checkout_area section_gap">
      <div class="container">
        <div class="row">
          <!-- Select Address Section -->
          <div class="col-md-8">
            <div class="select_address">
              <h3>Select Address</h3>
              <% if (addresses.address && addresses.address.length > 0) { %> <%
              addresses.address.forEach(address => { %>
              <div class="form-group">
                <input
                  type="radio"
                  name="addressId"
                  value="<%= address._id %>"
                  id="address_<%= address._id %>"
                  required
                />
                <label for="address_<%= address._id %>">
                  <strong><%= address.addressType %></strong><br />
                  <%= address.city %>, <%= address.landMark %><br />
                  <%= address.state %>, <%= address.pincode %><br />
                  Phone: <%= address.phone %><br />
                  Alternate Phone: <%= address.altPhone %>
                </label>
              </div>
              <% }); %>
              <div>
                <a href="/add-address?redirectTo=checkout">Add New Address</a>
              </div>
              <% } else { %>
              <p>
                <a href="/add-address?redirectTo=checkout"
                  >No saved addresses. Please add one.</a
                >
              </p>
              <% } %>
            </div>
          </div>

          <!-- Order Summary Section -->
          <div id="couponPopup" class="modal fade" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Available Coupons</h5>
                  <button
                    type="button"
                    class="close"
                    data-dismiss="modal"
                    aria-label="Close"
                  >
                    <span>&times;</span>
                  </button>
                </div>
                <div class="modal-body">
                  <% if (coupons.length > 0) { %>
                  <ul>
                    <% coupons.forEach(coupon => { %>
                    <li>
                      <strong style="color: #0097a7"><%= coupon.name %></strong>
                      - ₹<%= coupon.offerPrice %> Off (Min Purchase: ₹<%=
                      coupon.minimumPrice %>)
                    </li>
                    <% }); %>
                  </ul>
                  <% } else { %>
                  <p>No coupons available.</p>
                  <% } %>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="order_box">
              <h2>Your Order</h2>
              <% if (cart && cart.items && cart.items.length > 0) { %>
              <ul class="list">
                <li>
                  <a href="#">Product <span>Total</span></a>
                </li>
                <% cart.items.forEach(item => { %>
                  <li class="cart-item" data-product-id="<%= item.productId._id %>">
                      <div class="product-info">
                          <span class="product-name"><%= item.productId.productName %></span>
                          <span class="quantity">x <%= item.quantity %></span>
                          <span class="price last">
                              ₹<%= (item.productId.regularPrice * item.quantity).toFixed(2) %>
                          </span>
                      </div>
                  </li>
              <% }); %>
              
              
              </ul>
              <ul class="list list_2">
                <li>
                  <a href="#"
                    >Subtotal
                    <span id="subTotal">₹<%= totalOriginalPrice %></span></a
                  >
                </li>
                <li>
                  <a href="#">Shipping <span>₹<%= shippingCharge %></span></a>
                </li>
                <li>
                  <a href="#"
                    >Discount
                    <span id="productOffer"
                      >-₹<%= totalDiscount || 0 %></span
                    ></a
                  >
                </li>
                <li>
                  <a href="#"
                    >Coupon Discount
                    <span id="couponDiscountAmount"
                      >-₹<%= couponDiscount || 0 %></span
                    ></a
                  >
                </li>

                <% let gst = (typeof totalOfferPrice !== 'undefined' ? (totalOfferPrice * 0.18).toFixed(2) : "0.00"); %>

                <li>
                  <a href="#">GST (18%) <span>₹<%= gst %></span></a>
                </li>

                <% if (coupons && coupons.length > 0) { %>
                <li>
                  <button
                    type="button"
                    class="btn btn-info btn-sm"
                    data-toggle="modal"
                    data-target="#couponPopup"
                  >
                    View Coupons
                  </button>
                </li>
                <li>
                  <input
                    type="text"
                    id="couponCode"
                    class="form-control mt-2"
                    placeholder="Enter Coupon Code"
                  />
                  <button id="applyCoupon" class="btn btn-success btn-sm mt-2">
                    Apply
                  </button>
                </li>
                <% } %> <% if (cart.appliedCoupon) { %>
                  <li id="appliedCoupon">
                    <a href="#">Discount (<%= cart.appliedCoupon.name %>)
                      <span id="couponDiscount">-₹<%= cart.appliedCoupon.discount %></span>
                    </a>
                  </li>
                  <button
                    id="removeCoupon"
                    class="btn btn-danger btn-sm mt-2"
                    style="display: block"
                  >
                    Remove Coupon
                  </button>
              <% } else { %>
                  <button
                    id="removeCoupon"
                    class="btn btn-danger btn-sm mt-2"
                    style="display: none"
                  >
                    Remove Coupon
                  </button>
              <% } %>
              
              <% if (typeof subTotal !== 'undefined') { %>
                  <li>
                    <a href="#">Total <span id="finalTotal">₹<%= finalTotal %></span></a>
                  </li>
              <% } %>
              
              <% } else { %>
              <p>Your cart is empty</p>
              <% } %>
              <div id="couponMessage"></div>


              <h3><u>Payments</u></h3>
              <div class="payment_item active">
                <div class="radion_btn">
                  <input
                    type="radio"
                    id="f-option6"
                    name="paymentMethod"
                    value="Cash on Delivery"
                  />
                  <label for="f-option6"
                    ><i class="bi bi-cash"></i>Cash on Delivery</label
                  >
                  <div class="check"></div>
                </div>
              </div>
             
              <div class="payment_item active">
                <div class="radion_btn">
                  <input
                    type="radio"
                    id="f-option8"
                    name="paymentMethod"
                    value="razorPay"
                  />
                  <label for="f-option8"
                    ><i class="bi bi-bank"></i>Online Paymnet</label
                  >
                  <div class="check"></div>
                </div>
              </div>
              <div class="payment_item active">
                <div class="radion_btn">
                  <input
                    type="radio"
                    id="f-option9"
                    name="paymentMethod"
                    value="Wallets"
                  />
                  <label for="f-option9"
                    ><i class="bi bi-wallet2"></i>Wallets</label
                  >
                  <div class="check"></div>
                </div>
              </div>

              <a id="checkout-link" class="primary-btn" onclick="updateCheckoutLink()">Checkout</a>
            </div>
          </div>
        </div>
      </div>
    </section>
    <!--================End Checkout Area =================-->

   

    <script src="js/vendor/jquery-2.2.4.min.js"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js"
      integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4"
      crossorigin="anonymous"
    ></script>
    <script src="js/vendor/bootstrap.min.js"></script>
    <script src="js/jquery.ajaxchimp.min.js"></script>
    <script src="js/jquery.nice-select.min.js"></script>
    <script src="js/jquery.sticky.js"></script>
    <script src="js/nouislider.min.js"></script>
    <script src="js/jquery.magnific-popup.min.js"></script>
    <script src="js/owl.carousel.min.js"></script>
    <script src="js/main.js"></script>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>


    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function showAlert(type, title, text) {
            Swal.fire({
                icon: type, 
                title: title,
                text: text,
                confirmButtonColor: type === "success" ? "#28a745" : "#d33",
            });
        }
    
        
        const cart = JSON.parse('<%- JSON.stringify(cart || []) %>');
const cartItems = cart.items || []; 

function updateCheckoutLink() {
    const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
    const selectedAddress = document.querySelector('input[name="addressId"]:checked');

    if (!selectedPayment) {
        showAlert("warning", "Payment Method Required", "Please select a payment method before proceeding.");
        return;
    }

    if (!selectedAddress) {
    showAlert("warning", "Address Required", "Please select an address before proceeding.");
    console.error("No address selected.");
    return;
}
console.log("Selected Address ID:", selectedAddress.value);


    const addressId = selectedAddress.value;
    const totalPrice = document.getElementById("finalTotal").textContent.replace("₹", "").trim();
    ;
    const paymentMethod = selectedPayment.value;

    console.log("Selected Payment Method:", paymentMethod);
    console.log("Total Price:", totalPrice);
    console.log("Cart Items:", cartItems);

    switch (paymentMethod) {
        case "razorPay":
            if (typeof handleRazorpayPayment === "function") {
                handleRazorpayPayment(totalPrice, addressId, cartItems);
            } else {
                console.error("handleRazorpayPayment function is not defined");
            }
            break;

        case "Wallets":
            if (typeof handleWalletPayment === "function") {
                handleWalletPayment(totalPrice, addressId, cartItems);
            } else {
                console.error("handleWalletPayment function is not defined");
            }
            break;

        case "Cash on Delivery":
            if (typeof handleCashOnDelivery === "function") {
                handleCashOnDelivery(totalPrice, addressId, cartItems);
            } else {
                console.error("handleCashOnDelivery function is not defined");
            }
            break;

        default:
            showAlert("error", "Invalid Payment Method", "Please select a valid payment method.");
    }
}

async function handleRazorpayPayment(amount, addressId, cartItems, withPayment = true) {
    console.log("1 - Initiating Razorpay payment");

    try {
        const response = await fetch("/razorpay-payment", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ addressId, totalPrice: amount, cartItems, withPayment, initiateOnly: true }),
        });

        const data = await response.json();
        console.log("2 - Razorpay order response:", data);

        if (!data.success) {
            return swal.fire({
                title: "Error",
                text: data.message,
                icon: "error",
            });
        }

        if (!withPayment) {
            window.location.href = `/confirmation?cartItems=${encodeURIComponent(JSON.stringify(cartItems))}&totalPrice=${amount}&addressId=${addressId}&paymentMethod=Online Payment&paymentStatus=Pending&isPaid=false`;
            return;
        }

        const options = {
            key: data.key,
            amount: data.amount,
            currency: "INR",
            name: "Irfana",
            description: "Test Payment",
            order_id: data.razorpayOrderId,
            handler: async function (response) {
                console.log("3 - Payment success response:", response);

                const verifyResponse = await fetch("/razorpay-verify", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        payment_id: response.razorpay_payment_id,
                        order_id: response.razorpay_order_id,
                        signature: response.razorpay_signature,
                        addressId: addressId,
                        cartItems: cartItems,
                        totalPrice: amount,
                    }),
                });

                const verifyData = await verifyResponse.json();
                console.log("4 - Payment verification response:", verifyData);

                if (verifyData.success) {
                    swal.fire({
                        title: "Success",
                        text: "Payment successfully completed",
                        icon: "success",
                    });
                    window.location.href = verifyData.redirectUrl || `/confirmation?cartItems=${encodeURIComponent(JSON.stringify(cartItems))}&totalPrice=${amount}&addressId=${addressId}&paymentMethod=Online Payment&paymentStatus=Success&isPaid=true&orderId=${verifyData.orderId}`;
                } else {
                    swal.fire({
                        title: "Error",
                        text: "Payment verification failed",
                        icon: "error",
                    });
                }
            },
            prefill: {
                name: "BAG IT",
                email: "admin@bagit.com",
                contact: "9078563467",
            },
            theme: { color: "#3399cc" },
            modal: {
                ondismiss: function () {
                    console.log("6 - Razorpay payment window closed by user");

                    swal.fire({
                        title: "Payment Incomplete",
                        text: "You closed the payment window. What would you like to do?",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonText: "Continue Payment",
                        cancelButtonText: "Cancel Order",
                        showDenyButton: true,
                        denyButtonText: "Place Order",
                    }).then((result) => {
                        if (result.isConfirmed) {
                            console.log("User chose to continue payment");
                            handleRazorpayPayment(amount, addressId, cartItems);
                        } else if (result.isDenied) {
                            console.log("User marked order as placed without payment");
                            fetch("/create-order", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({
                                    addressId,
                                    totalPrice: amount,
                                    cartItems,
                                    paymentMethod: "Online Payment",
                                    paymentStatus: "Pending",
                                    
                                }),
                            })
                                .then((response) => response.json())
                                .then((data) => {
                                    if (data.success) {
                                        window.location.href = `/orders`;
                                    } else {
                                        swal.fire({
                                            title: "Error",
                                            text: data.message || "Failed to place order",
                                            icon: "error",
                                        });
                                    }
                                })
                                .catch((error) => {
                                    console.error("Error creating order:", error);
                                    swal.fire({
                                        title: "Error",
                                        text: "Something went wrong while placing the order.",
                                        icon: "error",
                                    });
                                });
                        } else {
                            console.log("User canceled the order");
                            window.location.href = "/checkout"; 
                        }
                    });
                },
            },
        };

        console.log("5 - Razorpay options:", options);
        const rzp = new Razorpay(options);
        rzp.open();
    } catch (error) {
        console.error("Error in Razorpay payment process:", error);
        swal.fire({
            title: "Error",
            text: "Something went wrong. Please try again later.",
            icon: "error",
        });
    }
}




function handleCashOnDelivery(amount, addressId, cartItems) {
    if (!amount || !addressId || !cartItems || cartItems.length === 0) {
        Swal.fire({
            icon: "error",
            title: "Invalid Order Details",
            text: "Please check your cart and address.",
        });
        return;
    }

    fetch("/cod-payment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ addressId, totalPrice: amount, cartItems }),
    })
    .then((res) => {
    if (!res.ok) {
        return res.json().then((errData) => {
            throw new Error(errData.message || `HTTP error! Status: ${res.status}`);
        });
    }
    return res.json();
})

    .then((data) => {
        if (data.success) {
            Swal.fire({
                icon: "success",
                title: "Order Placed Successfully!",
                text: "Your cash-on-delivery order has been placed.",
                confirmButtonText: "OK",
            }).then(() => {
                window.location.href = `/confirmation?cartItems=${encodeURIComponent(JSON.stringify(cartItems))}&totalPrice=${amount}&addressId=${addressId}&paymentMethod=Cash on Delivery&paymentStatus=Success`;
            });
        } else {
            Swal.fire({
                icon: "error",
                title: "Order Failed",
                text: data.message || "Failed to place COD order.",
            });
        }
    })
    .catch((err) => {
    console.error("COD Payment Error:", err);
    Swal.fire({
        icon: "error",
        title: "Order Failed",
        text: err.message || "Something went wrong. Please try again.",
    });
});

}




function handleWalletPayment(amount, addressId, cartItems) {
    fetch("/wallet-payment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ addressId, totalPrice: amount, cartItems }),
    })
    .then(res => {
        if (!res.ok) {
            return res.json().then(errorData => { throw new Error(errorData.message || "Wallet payment failed."); });
        }
        return res.json();
    })
    .then(data => {
        if (data.success) {
            Swal.fire({
                title: "Payment Successful!",
                text: "Your order has been placed using Wallet.",
                icon: "success",
                confirmButtonText: "OK"
            }).then(() => {
                window.location.href = `/confirmation?cartItems=${encodeURIComponent(JSON.stringify(cartItems))}&totalPrice=${amount}&addressId=${addressId}&paymentMethod=Wallet&paymentStatus=Success`;
            });
        } else {
            Swal.fire("Error", data.message || "Wallet payment failed.", "error");
        }
    })
    .catch(err => {
        console.error("Wallet payment error:", err);
        Swal.fire("Error", err.message || "Something went wrong. Please try again later.", "error");
    });
}



//coupon management
$('#applyCoupon').click(function() {
    let couponCode = $('#couponCode').val().trim();

    if (!couponCode) {
        alert('Please enter a coupon code.');
        return;
    }

    
    let subTotal = parseFloat($('#subTotal').text().replace('₹', '')) || 0;
    let shippingCharge = parseFloat($('ul.list_2 li:contains("Shipping") span').text().replace('₹', '')) || 0;
    let productOffer = parseFloat($('#productOffer').text().replace('-₹', '')) || 0;
    let gst = parseFloat($('ul.list_2 li:contains("GST") span').text().replace('₹', '')) || 0;

   
    let totalOfferPrice = subTotal - productOffer; 
    let totalBeforeCoupon = totalOfferPrice + gst + shippingCharge;

    $.ajax({
        url: '/apply-coupon',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({ couponCode, totalBeforeCoupon }),
        success: function(response) {
            if (response.success) {
                $('#couponMessage').text(response.message).css('color', 'green');
                $('#couponDiscountAmount').text(`-₹${response.couponDiscount.toFixed(2)}`);
                $('#finalTotal').text(`₹${response.finalTotal.toFixed(2)}`);

                
                if (response.appliedCoupon) {
                    $('#appliedCoupon').html(
                        `<a href="#">Discount (${response.appliedCoupon.name}) ` +
                        `<span id="couponDiscount">-₹${response.appliedCoupon.discount}</span></a>`
                    ).show();
                    $('#removeCoupon').show();
                }
            } else {
                $('#couponMessage').text(response.message).css('color', 'red');
            }
        },
        error: function() {
            alert('Something went wrong.');
        }
    });
});



$('#removeCoupon').click(function() {
    $.ajax({
        url: '/remove-coupon',
        type: 'POST',
        success: function(response) {
            if (response.success) {
                $('#couponMessage').text(response.message).css('color', 'green'); 
                $('#couponDiscountAmount').text('-₹0.00'); 
                $('#finalTotal').text(`₹${response.finalTotal.toFixed(2)}`); 
                $('#appliedCoupon').hide(); 
                $('#removeCoupon').hide(); 
                $('#couponCode').val(''); 
                $('#couponCode').attr('placeholder', 'Enter Coupon Code'); 
            } else {
                $('#couponMessage').text(response.message).css('color', 'red');
            }
        },
        error: function() {
            alert('Something went wrong.');
        }
    });
});
</script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<%-include("../../views/partials/user/footer")%>>
