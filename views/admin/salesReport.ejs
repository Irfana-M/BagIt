<%- include("../../views/partials/admin/header", { activePage: activePage }) %>
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Sales Report</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Inter", sans-serif;
      }

      body {
        background-color: #f5f6fa;
        color: #1a202c;
        line-height: 1.6;
      }

      .container {
        max-width: 1280px;
        margin: 0 auto;
        padding: 24px;
      }

      header {
        margin-bottom: 32px;
      }

      .title {
        font-size: 32px;
        font-weight: 700;
        color: #1a202c;
      }

      .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
        gap: 20px;
        margin-bottom: 40px;
      }

      .stat-card {
        background-color: #ffffff;
        border-radius: 12px;
        padding: 20px;
        text-align: center;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }

      .stat-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
      }

      .stat-number {
        font-size: 28px;
        font-weight: 600;
        color: #3182ce;
        margin-bottom: 8px;
      }

      .stat-label {
        font-size: 14px;
        font-weight: 500;
        color: #718096;
        text-transform: uppercase;
      }

      .section {
        background-color: #ffffff;
        border-radius: 12px;
        padding: 24px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        margin-bottom: 24px;
      }

      .filters {
        display: flex;
        align-items: center;
        gap: 16px;
        margin-bottom: 24px;
        flex-wrap: wrap;
      }

      .custom-dropdown,
      .date-input {
        padding: 10px 14px;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        font-size: 14px;
        background-color: #fff;
        color: #4a5568;
        transition: border-color 0.2s ease;
      }

      .custom-dropdown:focus,
      .date-input:focus {
        border-color: #3182ce;
        outline: none;
      }

      .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s ease;
      }

      .btn-primary {
        background-color: #3182ce;
        color: #fff;
      }

      .btn-primary:hover {
        background-color: #2b6cb0;
      }

      .btn-secondary {
        background-color: #edf2f7;
        color: #4a5568;
      }

      .btn-secondary:hover {
        background-color: #e2e8f0;
      }

      .data-table {
        width: 100%;
        border-collapse: collapse;
      }

      .data-table th,
      .data-table td {
        padding: 14px;
        text-align: left;
        font-size: 14px;
      }

      .data-table th {
        background-color: #3182ce;
        color: #fff;
        font-weight: 600;
        text-transform: uppercase;
      }

      .data-table td {
        border-bottom: 1px solid #edf2f7;
        color: #4a5568;
      }

      .data-table tr:hover {
        background-color: #f7fafc;
      }

      .no-data {
        text-align: center;
        padding: 24px;
        color: #718096;
        font-style: italic;
        font-size: 16px;
      }

      .action-buttons {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
        margin-top: 20px;
      }

      .chart-container {
        padding: 24px;
      }

      h3 {
        font-size: 20px;
        font-weight: 600;
        color: #1a202c;
        margin-bottom: 16px;
      }

      @media (max-width: 768px) {
        .filters {
          flex-direction: column;
          align-items: flex-start;
        }
        .stats-container {
          grid-template-columns: 1fr;
        }
        .action-buttons {
          justify-content: center;
        }
        .pagination {
          display: flex;
          justify-content: center;
          align-items: center;
          gap: 12px;
          margin-top: 20px;
        }

        .pagination .btn {
          padding: 8px 16px;
        }

        .pagination span {
          font-size: 14px;
          color: #4a5568;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <header>
        <div class="title">Sales Report</div>
      </header>

      <!-- Stats Cards -->
      <div class="stats-container">
        <div class="stat-card">
          <div class="stat-number"><%= totalUsers %></div>
          <div class="stat-label">Total Users</div>
        </div>
        <div class="stat-card">
          <div class="stat-number"><%= totalProducts %></div>
          <div class="stat-label">Total Products</div>
        </div>
        <div class="stat-card">
          <div class="stat-number"><%= totalOrders %></div>
          <div class="stat-label">Total Orders</div>
        </div>
        <div class="stat-card">
          <div class="stat-number"><%= salesCount %></div>
          <div class="stat-label">Sales Count</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">₹<%= overallRevenue.toFixed(2) %></div>
          <div class="stat-label">Overall Revenue</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">₹<%= overallDiscount.toFixed(2) %></div>
          <div class="stat-label">Overall Discount</div>
        </div>
      </div>

      <!-- Sales Chart -->
      <div class="section chart-container">
        <h3>Sales Overview</h3>
        <div class="filters">
          <select class="custom-dropdown" id="chart-filter-type">
            <option value="daily">Daily</option>
            <option value="weekly">Weekly</option>
            <option value="monthly" selected>Monthly</option>
            <option value="yearly">Yearly</option>
            <option value="custom">Custom</option>
          </select>
          <div
            class="date-filters"
            id="chart-custom-date"
            style="display: none"
          >
            <input type="date" class="date-input" id="chart-start-date" />
            <input type="date" class="date-input" id="chart-end-date" />
          </div>
          <button class="btn btn-primary" id="generate-chart">
            Update Chart
          </button>
        </div>
        <canvas id="salesChart"></canvas>
      </div>

      <!-- Sales Data Table -->
      <div class="section">
        <h3>Sales Report</h3>
        <div class="data-table-container">
          <div class="filters">
            <select class="custom-dropdown" id="report-filter-type">
              <option value="today" selected>Today</option>
              <option value="week">This Week</option>
              <option value="month">This Month</option>
              <option value="custom">Custom</option>
            </select>
            <div
              class="date-filters"
              id="report-custom-date"
              style="display: none"
            >
              <input type="date" class="date-input" id="report-start-date" />
              <input type="date" class="date-input" id="report-end-date" />
            </div>
            <button class="btn btn-primary" id="generate-report">
              Generate Report
            </button>
          </div>

          <table class="data-table">
            <thead>
              <tr>
                <th>Order Id</th>
                <th>User Name</th>
                <th>Product Name</th>
                <th>Product Category</th>
                <th>Quantity Sold</th>
                <th>Unit Price</th>
                <th>Discount Applied</th>
                <th>Order Status</th>
                <th>Order Date</th>
              </tr>
            </thead>
            <tbody id="sales-data-body">
              <% if (Array.isArray(salesData) && salesData.length > 0) { %> <%
              salesData.forEach(data => { %>
              <tr>
                <td><%= data.orderId %></td>
                <td><%= data.customerName %></td>
                <td><%= data.productName %></td>
                <td><%= data.categoryName %></td>
                <td><%= data.quantitySold %></td>
                <td>₹<%= data.unitPrice.toFixed(2) %></td>
                <td>₹<%= data.discountApplied.toFixed(2) %></td>
                <td><%= data.orderStatus %></td>
                <td><%= data.orderDate %></td>
              </tr>
              <% }) %> <% } else { %>
              <tr class="no-data">
                <td colspan="9">No sales data found</td>
              </tr>
              <% } %>
            </tbody>
          </table>

          <!-- Pagination Controls -->
          <div class="pagination" id="pagination-controls">
            <button class="btn btn-secondary" id="prev-page" disabled>
              Previous
            </button>
            <span id="page-info"
              >Page <%= currentPage %> of <%= totalPages %></span
            >
            <button class="btn btn-secondary" id="next-page" <%= currentPage === totalPages ? 'disabled' : '' %>>Next</button>

          </div>

          <div class="action-buttons">
            <button class="btn btn-secondary" id="download-pdf">
              <i class="fas fa-file-pdf"></i> Download PDF
            </button>
            <button class="btn btn-secondary" id="download-excel">
              <i class="fas fa-file-excel"></i> Download Excel
            </button>
          </div>
        </div>
      </div>

      <!-- Best-Selling Products Table -->
      <div class="section">
        <h3>Best-Selling Products (Top 10)</h3>
        <table class="data-table" id="best-products-table">
          <thead>
            <tr>
              <th>Product Name</th>
              <th>Total Sales</th>
              <th>Revenue</th>
              <th>Stock Status</th>
            </tr>
          </thead>
          <tbody id="best-products-body"></tbody>
        </table>
      </div>

      <!-- Top 10 Best-Selling Categories Table -->
      <div class="section">
        <h3>Best-Selling Categories (Top 10)</h3>
        <table class="data-table" id="top-categories-table">
          <thead>
            <tr>
              <th>Category</th>
              <th>Total Sales</th>
              <th>Revenue</th>
            </tr>
          </thead>
          <tbody id="top-categories-body"></tbody>
        </table>
      </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        let salesChartInstance;
        let currentPage = parseInt("<%= currentPage %>") || 1;
        let limit = parseInt("<%= limit %>") || 10;
        let totalPages = parseInt("<%= totalPages %>") || 1;

        fetchSalesData("monthly");
        fetchBestSellingProducts();
        fetchBestSellingCategories();

        const chartFilterType = document.getElementById("chart-filter-type");
        const chartCustomDate = document.getElementById("chart-custom-date");
        chartFilterType.addEventListener("change", (e) => {
          chartCustomDate.style.display =
            e.target.value === "custom" ? "flex" : "none";
          if (e.target.value !== "custom") fetchSalesData(e.target.value);
        });

        document
          .getElementById("generate-chart")
          .addEventListener("click", () => {
            const filter = chartFilterType.value;
            if (filter === "custom") {
              const startDate =
                document.getElementById("chart-start-date").value;
              const endDate = document.getElementById("chart-end-date").value;
              if (startDate && endDate)
                fetchSalesData(filter, startDate, endDate);
              else
                alert("Please select both start and end dates for the chart.");
            } else {
              fetchSalesData(filter);
            }
          });

        // Report filter handling
        const reportFilterType = document.getElementById("report-filter-type");
        const reportCustomDate = document.getElementById("report-custom-date");
        reportFilterType.addEventListener("change", (e) => {
          reportCustomDate.style.display =
            e.target.value === "custom" ? "flex" : "none";
        });

        document
          .getElementById("generate-report")
          .addEventListener("click", () => {
            const filter = reportFilterType.value;
            const startDate =
              document.getElementById("report-start-date").value;
            const endDate = document.getElementById("report-end-date").value;
            fetchTableData(filter, startDate, endDate, 1); // Reset to page 1 on new filter
          });

        // Pagination controls
        document.getElementById("prev-page").addEventListener("click", () => {
          if (currentPage > 1) {
            currentPage--;
            fetchTableData(
              reportFilterType.value,
              document.getElementById("report-start-date").value,
              document.getElementById("report-end-date").value,
              currentPage
            );
          }
        });

        document.getElementById("next-page").addEventListener("click", () => {
          if (currentPage < totalPages) {
            currentPage++;
            fetchTableData(
              reportFilterType.value,
              document.getElementById("report-start-date").value,
              document.getElementById("report-end-date").value,
              currentPage
            );
          }
        });

        // Download buttons
        document
          .getElementById("download-pdf")
          .addEventListener("click", () => {
            const filter = reportFilterType.value;
            const startDate =
              document.getElementById("report-start-date").value;
            const endDate = document.getElementById("report-end-date").value;
            window.location.href = `/admin/sales/download-pdf?filter=${filter}&start=${startDate}&end=${endDate}`;
          });

        document
          .getElementById("download-excel")
          .addEventListener("click", () => {
            const filter = reportFilterType.value;
            const startDate =
              document.getElementById("report-start-date").value;
            const endDate = document.getElementById("report-end-date").value;
            window.location.href = `/admin/sales/download-excel?filter=${filter}&start=${startDate}&end=${endDate}`;
          });

        // Fetch chart data
        async function fetchSalesData(
          filter,
          startDate = null,
          endDate = null
        ) {
          try {
            let url = `/admin/sales-report?filter=${filter}`;
            if (filter === "custom" && startDate && endDate) {
              url += `&startDate=${startDate}&endDate=${endDate}`;
            }
            const res = await axios.get(url);
            const salesData = res.data;

            const ctx = document.getElementById("salesChart").getContext("2d");
            if (salesChartInstance) salesChartInstance.destroy();

            salesChartInstance = new Chart(ctx, {
              type: "line",
              data: {
                labels: salesData.map((data) => data._id),
                datasets: [
                  {
                    label: "Total Sales (₹)",
                    data: salesData.map((data) => data.totalSales),
                    borderColor: "#3182ce",
                    backgroundColor: "rgba(49, 130, 206, 0.1)",
                    fill: true,
                    tension: 0.4,
                  },
                ],
              },
              options: {
                scales: {
                  x: { title: { display: true, text: "Date" } },
                  y: {
                    title: { display: true, text: "Sales (₹)" },
                    beginAtZero: true,
                  },
                },
                plugins: { legend: { position: "top" } },
              },
            });
          } catch (error) {
            console.error("Error fetching chart data:", error);
          }
        }

        // Fetch table data with pagination
        async function fetchTableData(filter, startDate, endDate, page) {
          try {
            let url = `/admin/sales?filter=${filter}&page=${page}&limit=${limit}`;
            if (filter === "custom" && startDate && endDate) {
              url += `&start=${startDate}&end=${endDate}`;
            }
            const res = await axios.get(url);
            const {
              salesData,
              currentPage: newPage,
              totalPages: newTotalPages,
              totalItems,
            } = res.data;

            currentPage = newPage;
            updateTable(salesData);
            updatePagination(newPage, newTotalPages);
          } catch (error) {
            console.error("Error fetching table data:", error);
          }
        }

        function updateTable(data) {
          const tbody = document.getElementById("sales-data-body");
          tbody.innerHTML = "";

          if (data.length > 0) {
            data.forEach((item) => {
              const row = `
                            <tr>
                                <td>${item.orderId}</td>
                                <td>${item.customerName}</td>
                                <td>${item.productName}</td>
                                <td>${item.categoryName}</td>
                                <td>${item.quantitySold}</td>
                                <td>₹${item.unitPrice.toFixed(2)}</td>
                                <td>₹${item.discountApplied.toFixed(2)}</td>
                                <td>${item.orderStatus}</td>
                                <td>${item.orderDate}</td>
                            </tr>
                        `;
              tbody.innerHTML += row;
            });
          } else {
            tbody.innerHTML = `
                        <tr class="no-data">
                            <td colspan="9">No sales data found</td>
                        </tr>
                    `;
          }
        }

        function updatePagination(currentPage, totalPagesNew) {
          totalPages = totalPagesNew;
          const pageInfo = document.getElementById("page-info");
          pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
          document.getElementById("prev-page").disabled = currentPage === 1;
          document.getElementById("next-page").disabled =
            currentPage >= totalPages;
        }
        async function fetchBestSellingProducts() {
          try {
            const res = await axios.get("/admin/best-selling-products");
            const products = res.data;
            const tbody = document.getElementById("best-products-body");

            tbody.innerHTML = "";
            if (products.length > 0) {
              products.forEach((product) => {
                const row = document.createElement("tr");
                row.innerHTML = `
                                <td>${product.name}</td>
                                <td>${product.totalSales}</td>
                                <td>₹${product.revenue.toFixed(2)}</td>
                                <td>${
                                  product.stock > 0
                                    ? `In Stock (${product.stock})`
                                    : `Out of Stock (${product.stock})`
                                }</td>
                            `;
                tbody.appendChild(row);
              });
            } else {
              tbody.innerHTML = `<tr><td colspan="4" class="no-data">No best-selling products found</td></tr>`;
            }
          } catch (error) {
            console.error("Error fetching best-selling products:", error);
          }
        }

        async function fetchBestSellingCategories() {
          try {
            const res = await axios.get("/admin/best-selling-categories");
            const categories = res.data;
            const tbody = document.getElementById("top-categories-body");

            tbody.innerHTML = "";
            if (categories.length > 0) {
              categories.forEach((category) => {
                const row = document.createElement("tr");
                row.innerHTML = `
                                <td>${category.name || "Uncategorized"}</td>
                                <td>${category.totalSales}</td>
                                <td>₹${category.revenue.toFixed(2)}</td>
                            `;
                tbody.appendChild(row);
              });
            } else {
              tbody.innerHTML = `<tr><td colspan="3" class="no-data">No top categories found</td></tr>`;
            }
          } catch (error) {
            console.error("Error fetching best-selling categories:", error);
          }
        }
      });
    </script>
  </body>
</html>
