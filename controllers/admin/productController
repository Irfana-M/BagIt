const Product = require("../../models/productSchema");
const Category = require("../../models/categorySchema");
const fs = require("fs");
const path = require("path");
const sharp = require("sharp");


const ensureUploadDirExists = (dirPath) => {
    if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
    }
};

const getProductAddPage = async (req, res) => {
    try {
        const category = await Category.find({ isListed: true });
        res.render("product-add", { cat: category,currentPage:'products',activePage:'product-add' });
    } catch (error) {
        console.error("Error in getProductAddPage:", error);
        return res.redirect("/admin/pageerror");
    }
};

const addProducts = async (req, res) => {
    try {
        const products = req.body;
        const productExists = await Product.findOne({ productName: products.productName });

        if (!productExists) {
            const images = [];

            

            if (req.files && req.files.length > 0) {
                ensureUploadDirExists(path.join(__dirname, "..", "..", "public", "uploads", "product-images"));
            
                for (let i = 0; i < req.files.length; i++) {
                    const originalImagePath = req.files[i].path;
                    const resizedImagePath = path.join("public", "uploads", "product-images", req.files[i].filename);
                    
                    
                    const image = sharp(originalImagePath);
                    const metadata = await image.metadata();
            
                    
                    if (metadata.width > metadata.height) {
                        
                        await image.resize({
                            width: 440, 
                            fit: 'cover', 
                            position: 'center' 
                        }).toFile(resizedImagePath);
                    } else {
                        
                        await image.resize({
                            height: 440, 
                            fit: 'cover', 
                            position: 'center' 
                        }).toFile(resizedImagePath);
                    }
            
                    images.push(req.files[i].filename);
                }
            }
            
            
            

            const categoryId = await Category.findOne({ name: products.category });
            if (!categoryId) {
                return res.status(400).send("Invalid category name");
            }

            const newProduct = new Product({
                productName: products.productName,
                description: products.description,
                category: categoryId._id,
                regularPrice: products.regularPrice,
                salePrice: products.salePrice,
                createdOn: new Date(),
                quantity: products.quantity,
                size: products.size,
                color: products.color,
                productImage: images,
                status: "Available",
            });

            await newProduct.save();
            return res.redirect("/admin/addProducts");
        } else {
            return res.status(400).json("Product already exists, please try with another name");
        }
    } catch (error) {
        console.error("Error saving product:", error);
        return res.redirect("/admin/pageerror");
    }
};

const getAllProducts = async (req, res) => {
    try {
     
        const search = req.query.search || "";
        const page = req.query.page || 1;
        const limit = 4;

        const productData = await Product.find({
            productName: { $regex: new RegExp(".*" + search + ".*", "i") }
        }).limit(limit).skip((page - 1) * limit).populate("category").exec();

        const count = await Product.find({
            productName: { $regex: new RegExp(".*" + search + ".*", "i") }
        }).countDocuments();

        const category = await Category.find({ isListed: true });
        
        if (category) {
           
            res.render("products", {
                data: productData,
                currentPage: page,
                totalPages: Math.ceil(count / limit),
                cat: category,
                activePage:'products'
            });
            
        }
        
        else {
            res.render("page-404");
        }
       
    } catch (error) {
        console.error("Error in getAllProducts:", error);
        return res.redirect("/admin/pageerror");
    }
};

const addProductOffer = async(req,res)=>{
    try {
        const {productId,percentage} = req.body;
        const findProduct = await Product.findOne({_id:productId});
        const findCategory = await Category.findOne({_id:findProduct.category});
        if(findCategory.categoryOffer>percentage){
            return res.json({status:false,message:"This products cateory already has a category offer"})
        }
        findProduct.salePrice = findProduct.salePrice-Math.floor(findProduct.regularPrice*(percentage/100));
        findProduct.productOffer = parseInt(percentage);
        await findProduct.save();
        findCategory.categoryOffer = 0;
        await findCategory.save();
        res.json({status:true});
    } catch (error) {
        return res.redirect("/admin/pageerror");
        res.status(500).json({status:false,message:"Internal server error"})
    }
}

const removeProductOffer = async (req,res)=>{
    try {
        const {productId} = req.body;
        const findProduct = await Product.findOne({_id:productId});
        const percentage = findProduct.productOffer;
        findProduct.salePrice = findProduct.salePrice+Math.floor(findProduct.regularPrice*(percentage/100));
        findProduct.productOffer = 0;
        await findProduct.save();
        res.json({status:true})

    } catch (error) {
        return res.redirect("/admin/pageerror");
    }
}

const blockProduct = async (req,res)=>{
    try {
        let id = req.query.id;
        await Product.updateOne({_id:id},{$set:{isBlocked:true}});
        res.redirect("/admin/products");
    } catch (error) {
        return res.redirect("/admin/pageerror");
    }
}

const unblockProduct = async (req,res)=>{
    try {
        let id = req.query.id;
        await Product.updateOne({_id:id},{isBlocked:false});
        res.redirect("/admin/products");
    } catch (error) {
        return res.redirect("/admin/pageerror");
    }
}


const getEditProduct = async (req,res)=>{
    try {
        const id = req.query.id;
        const product = await Product.findOne({_id:id});
        const category = await Category.find({});
        res.render("edit-product",{
            product:product,
            cat:category,
            activePage : 'products'

        })
    } catch (error) {
        return res.redirect("/admin/pageerror");
    }
}


const editProduct = async (req, res) => {
    try {
        
        const id = req.params.id;
        const data = req.body;

        // Fetch existing product details
        const product = await Product.findById(id);
        if (!product) {
            return res.status(404).json({ error: "Product not found" });
        }

        let images = product.productImage || []; // Keep existing images

        // Check if a product with the same name already exists (excluding the current product)
        const existingProduct = await Product.findOne({
            productName: data.productName,
            _id: { $ne: id }
        });

        if (existingProduct) {
            return res.status(400).json({
                error: "Product with this name already exists. Please try with another name."
            });
        }

        // Validate and convert the `category` field to ObjectId
        let categoryId;
        if (data.category) {
            const category = await Category.findOne({ name: data.category });
            if (!category) {
                return res.status(400).json({ error: "Invalid category name." });
            }
            categoryId = category._id;
        }

        // Process uploaded files
        if (req.files && req.files.length > 0) {
            const uploadPath = path.join(__dirname, "..", "..", "public", "uploads", "product-images");

            if (!fs.existsSync(uploadPath)) {
                fs.mkdirSync(uploadPath, { recursive: true }); // Ensure directory exists
            }

            for (let i = 0; i < req.files.length; i++) {
                const originalImagePath = req.files[i].path;
                const resizedImagePath = path.join(uploadPath, req.files[i].filename);

                const image = sharp(originalImagePath);
                const metadata = await image.metadata();

                if (metadata.width > metadata.height) {
                    await image.resize({ width: 440, fit: "cover", position: "center" }).toFile(resizedImagePath);
                } else {
                    await image.resize({ height: 440, fit: "cover", position: "center" }).toFile(resizedImagePath);
                }

                images.push(req.files[i].filename); // Add new images while keeping existing ones
            }
        }

        console.log("Updated images:", images);

        // Prepare update fields
        const updateFields = {
            productName: data.productName,
            description: data.description,
            category: categoryId,
            regularPrice: data.regularPrice,
            salePrice: data.salePrice,
            quantity: data.quantity,
            size: data.size,
            color: data.color,
            productImage: images, // Keep existing + new images
        };

        // Update the product
        await Product.findByIdAndUpdate(id, updateFields, { new: true });
        res.redirect("/admin/products");
    } catch (error) {
        console.error(error);
        return res.redirect("/admin/pageerror");
    }
};


const deleteSingleImage = async (req,res)=>{
    try {
        const {imageNameToServer,productIdToServer} = req.body;
        const product = await Product.findByIdAndUpdate(productIdToServer,{$pull:{productImage:imageNameToServer}});
        const imagePath = path.join("public","uploads","re-image",imageNameToServer);
        if(fs.existsSync(imagePath)){
            await fs.unlinkSync(imagePath);
            console.log(`${imageNameToServer} deleted successfully`);
        }else{
            console.log(`Immage ${imageNameToServer} not found`)
        }
        res.send({status:true});
    } catch (error) {
        return res.redirect("/admin/pageerror");
    }
}


const deleteProduct = async (req, res) => {
        try {
          const { productId } = req.body; // Get productId from the request body
          console.log(productId);
          if (!productId) {
            return res.status(400).json({ status: false, message: "product ID is required." });
          }
      
          const deletedProduct = await Product.findByIdAndDelete(productId); // Delete the category
      
          if (!deletedProduct) {
            return res.status(404).json({ status: false, message: "Prodcut not found." });
          }
      
          res.json({ status: true, message: "Product deleted successfully." });
        } catch (error) {
            return res.redirect("/admin/pageerror");
          console.error("Error deleting product:", error);
          res.status(500).json({ status: false, message: "Internal server error." });
        }
      };

module.exports = { getProductAddPage, addProducts, getAllProducts ,addProductOffer,removeProductOffer,
    blockProduct,unblockProduct,getEditProduct,editProduct,deleteSingleImage,deleteProduct
};
